// /org/types/settings.ts
import { AI_PREFERENCES_MAIN, AI_PREFERENCES_SECOND } from '../config/aiRequestOptions';

export interface Settings {
    quickChatSettings: QuickChatSettings;
    aiModelSettings: AIModelSettings;
    controlSettings: ControlSettings;
    pageSettings: Record<string, unknown>; // Page settings fields (omitted for brevity)
    userSettings: Record<string, unknown>; // User settings fields (omitted for brevity)
    matrixSettings: Record<string, unknown>; // Matrix settings fields (omitted for brevity)
    clientSettings: Record<string, unknown>; // Client settings fields (omitted for brevity)
    agencySettings: Record<string, unknown>; // Agency settings fields (omitted for brevity)
    variablesSettings: Record<string, unknown>; // Variables settings fields (omitted for brevity)
    responseSettings: Record<string, unknown>; // Response settings fields (omitted for brevity)
    brokerSettings: Record<string, unknown>; // Broker settings fields (omitted for brevity)
}

export interface QuickChatSettings {
    aiPreferencesMain: typeof AI_PREFERENCES_MAIN[number];
    aiPreferencesSecond: typeof AI_PREFERENCES_SECOND[number];
    makeSmallTalk: boolean; // DEFAULT: false
    quickAnswer: boolean; // DEFAULT: true
    improveQuestions: boolean; // DEFAULT: false
    submitOnEnter: boolean; // DEFAULT: true
}

export interface AIModelSettings {
    id: string; // Model ID (uuid generated by the backend)
    api: API; // Model's API Provider or Company (needs OPTIONS)
    model: string; // Model name (official name)
    commonName: string; // Common name for the model
    class: string; // Model class
    type: string; // Model type
    limitations: Limitations;
    controls: Record<string, unknown>; // Model controls
}

export interface API {
    provider: string; // API provider
    endpoint: string; // API endpoint
}

export interface Limitations {
    contextWindow: number; // Context window size
    maxTokens: number; // Maximum tokens allowed
    capabilities: string[]; // Capabilities of the model
}

export interface ControlSettings {
    id: string; // Control ID
    componentType: string; // Type of the component, e.g., 'slider'
    label: string; // Label for the control, e.g., 'Temperature'
    helpText: string; // Help text for the control
    type: string; // Type of the control, e.g., 'float'
    value: number; // Default value of the control
    min: number; // Minimum value
    max: number; // Maximum value
    step: number; // Step value for the control
    choices: Choice[];
}

export interface Choice {
    id: string; // Choice ID
    label: string; // Label for the choice
    value: boolean; // Value of the choice
}
